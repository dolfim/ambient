/*
 * Copyright Institute for Theoretical Physics, ETH Zurich 2014.
 * Distributed under the Boost Software License, Version 1.0.
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef AMBIENT_IO
#define AMBIENT_IO

namespace ambient { 
    namespace numeric {
        template<typename T> class future;
    }
    bool verbose();
}

namespace ambient { namespace utils {

    class ostream {
    public:
        std::fstream nullio;
        ostream() : nullio("/dev/null") { }

        template<class T>
        ostream& operator<<(ambient::numeric::future<T> const & obj){
            std::cout << obj.load();
            return *this;
        }

        template<class T>
        ostream& operator<<(T const & obj){
            std::cout << obj;
            return *this;
        }

        ostream& operator<<(std::ostream& (*pf)(std::ostream&)){
            std::cout << pf;
            return *this;
        }

        void precision(int p){
            std::cout.precision(p);
        }

        void flush(){
            std::cout.flush();
        }
    };

    class mpostream {
    public:
        std::fstream nullio;
        mpostream() : nullio("/dev/null") { }

        template<class T>
        mpostream& operator<<(ambient::numeric::future<T> const & obj){
            if(ambient::verbose()) std::cout << obj.load();
            else nullio << obj.load();
            return *this;
        }

        template<class T>
        mpostream& operator<<(T const & obj){
            if(ambient::verbose()) std::cout << obj;
            return *this;
        }

        mpostream& operator<<(std::ostream& (*pf)(std::ostream&)){
            if(ambient::verbose()) std::cout << pf;
            return *this;
        }

        void precision(int p){
            if(ambient::verbose()) std::cout.precision(p);
        }

        void flush(){
            if(ambient::verbose()) std::cout.flush();
        }
    };

} }

namespace ambient {
    #ifdef AMBIENT_GLOBALS
    utils::mpostream cout;
    utils::mpostream cerr;
    #else
    extern utils::mpostream cout;
    extern utils::mpostream cerr;
    #endif
}

#endif
