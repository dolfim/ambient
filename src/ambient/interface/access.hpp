/*
 * Copyright Institute for Theoretical Physics, ETH Zurich 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef AMBIENT_INTERFACE_ACCESS
#define AMBIENT_INTERFACE_ACCESS

namespace ambient {

    using model::revision;

    namespace ext {

        template <typename T> static revision& naked(T& obj){
            return *obj.ambient_allocator.desc->current;
        }

        template <typename T> static bool exclusive(T& obj){
            ambient::select().get_controller().touch(obj.ambient_allocator.desc);
            revision& c = *obj.ambient_allocator.desc->current;
            if(ambient::select().get_actor().remote()){
                c.state = locality::remote;
                c.owner = ambient::which();
                return true;
            }else{
                c.state = locality::local;
                if(!c.valid()) c.embed(obj.ambient_allocator.alloc(c.spec));
                return false;
            }
        }

        template<typename V>
        void swap(V& left, V& right){
            // swapping allocators should be better
            std::swap(left.ambient_allocator.desc, right.ambient_allocator.desc);
            left.ambient_after = left.ambient_allocator.desc->current;
            right.ambient_after = right.ambient_allocator.desc->current;
        }

        template <typename T> static void transform(const T& obj){
            if(!is_polymorphic<T>::value) return;
            new ((void*)&obj) typename get_async_type<T>::type();
        }
    }

    template<typename V>
    inline void merge(const V& src, V& dst){
        assert(dst.ambient_allocator.desc->current == NULL);
        if(weak(src)) return;
        revision* r = src.ambient_allocator.desc->back();
        dst.ambient_allocator.desc->current = r;
        // do not deallocate or reuse
        if(!r->valid() && r->state != locality::remote){
            assert(r->spec.signature != memory::delegated::signature);
            r->spec.protect();
        }
        assert(!r->valid() || !r->spec.bulked() || model::remote(r)); // can't rely on bulk memory
        r->spec.crefs++;
    }

    template <typename T> static T& load(T& obj){ 
        ambient::select().get_controller().touch(obj.ambient_allocator.desc);
        ambient::sync(); 
        revision& c = *obj.ambient_allocator.desc->current;
        assert(c.state == locality::local || c.state == locality::common);
        if(!c.valid()) c.embed(obj.ambient_allocator.calloc(c.spec));
        obj.ambient_after = obj.ambient_allocator.desc->current;
        return obj;
    }

    template <typename T> static auto delegated(T& obj) -> typename T::ambient_type_structure& {
        return *(typename T::ambient_type_structure*)(*obj.ambient_after);
    }

    template <typename T> static void revise(const T& obj){
        ext::transform(obj);
        revision& c = *obj.ambient_before; if(c.valid()) return;
        c.embed(obj.ambient_allocator.calloc(c.spec));
    }

    template <typename T> static void revise(volatile T& obj){
        ext::transform(obj);
        revision& c = *obj.ambient_after; if(c.valid()) return;
        revision& p = *obj.ambient_before;
        if(p.valid() && p.locked_once() && !p.referenced() && c.spec.conserves(p.spec)) c.reuse(p);
        else c.embed(obj.ambient_allocator.alloc(c.spec));
    }

    template <typename T> static void revise(T& obj){
        ext::transform(obj);
        revision& c = *obj.ambient_after; if(c.valid()) return;
        revision& p = *obj.ambient_before;
        if(!p.valid()) c.embed(obj.ambient_allocator.calloc(c.spec));
        else if(p.locked_once() && !p.referenced() && c.spec.conserves(p.spec)) c.reuse(p);
        else{
            c.embed(obj.ambient_allocator.alloc(c.spec));
            memcpy((T*)c, (T*)p, p.spec.extent);
        }
    }
}

#endif
