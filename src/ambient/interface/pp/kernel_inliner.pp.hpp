/*
 * Ambient, License - Version 1.0 - May 3rd, 2012
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

template< typename T0 , void(*fp)( T0& )>
struct kernel_inliner<void(*)( T0& ), fp> {
    typedef T0 t0;
    static const int arity = 1;
    static inline void latch(functor* o, T0& arg0 ){
        if(selector.tunable()){
            info<T0>::typed::template score<0>(arg0);
            selector.schedule();
        }
        if(selector.get_actor().remote()){
            info<T0>::typed::template modify_remote<0>(arg0);
            return;
        }else if(selector.get_actor().local()){
            info<T0>::typed::template modify_local<0>(arg0, o);
        }else{
            info<T0>::typed::template modify<0>(arg0, o);
        }
        info<T0>::typed::template pin<0>(o) ||
        selector.get_controller().queue(o);
    }
    static inline void invoke(functor* o){
        (*fp)( info<T0>::typed::template revised<0>(o) );
    }
    static inline void cleanup(functor* o){
        info<T0>::typed::template deallocate<0>(o);
    }
    static inline bool ready(functor* o){
        return (info<T0>::typed::template ready<0>(o) && true);
    }
};
template< typename T0 , typename T1 , void(*fp)( T0& , T1& )>
struct kernel_inliner<void(*)( T0& , T1& ), fp> {
    typedef T0 t0; typedef T1 t1;
    static const int arity = 2;
    static inline void latch(functor* o, T0& arg0 , T1& arg1 ){
        if(selector.tunable()){
            info<T0>::typed::template score<0>(arg0); info<T1>::typed::template score<1>(arg1);
            selector.schedule();
        }
        if(selector.get_actor().remote()){
            info<T0>::typed::template modify_remote<0>(arg0); info<T1>::typed::template modify_remote<1>(arg1);
            return;
        }else if(selector.get_actor().local()){
            info<T0>::typed::template modify_local<0>(arg0, o); info<T1>::typed::template modify_local<1>(arg1, o);
        }else{
            info<T0>::typed::template modify<0>(arg0, o); info<T1>::typed::template modify<1>(arg1, o);
        }
        info<T0>::typed::template pin<0>(o) || info<T1>::typed::template pin<1>(o) ||
        selector.get_controller().queue(o);
    }
    static inline void invoke(functor* o){
        (*fp)( info<T0>::typed::template revised<0>(o) , info<T1>::typed::template revised<1>(o) );
    }
    static inline void cleanup(functor* o){
        info<T0>::typed::template deallocate<0>(o); info<T1>::typed::template deallocate<1>(o);
    }
    static inline bool ready(functor* o){
        return (info<T0>::typed::template ready<0>(o) && info<T1>::typed::template ready<1>(o) && true);
    }
};
template< typename T0 , typename T1 , typename T2 , void(*fp)( T0& , T1& , T2& )>
struct kernel_inliner<void(*)( T0& , T1& , T2& ), fp> {
    typedef T0 t0; typedef T1 t1; typedef T2 t2;
    static const int arity = 3;
    static inline void latch(functor* o, T0& arg0 , T1& arg1 , T2& arg2 ){
        if(selector.tunable()){
            info<T0>::typed::template score<0>(arg0); info<T1>::typed::template score<1>(arg1); info<T2>::typed::template score<2>(arg2);
            selector.schedule();
        }
        if(selector.get_actor().remote()){
            info<T0>::typed::template modify_remote<0>(arg0); info<T1>::typed::template modify_remote<1>(arg1); info<T2>::typed::template modify_remote<2>(arg2);
            return;
        }else if(selector.get_actor().local()){
            info<T0>::typed::template modify_local<0>(arg0, o); info<T1>::typed::template modify_local<1>(arg1, o); info<T2>::typed::template modify_local<2>(arg2, o);
        }else{
            info<T0>::typed::template modify<0>(arg0, o); info<T1>::typed::template modify<1>(arg1, o); info<T2>::typed::template modify<2>(arg2, o);
        }
        info<T0>::typed::template pin<0>(o) || info<T1>::typed::template pin<1>(o) || info<T2>::typed::template pin<2>(o) ||
        selector.get_controller().queue(o);
    }
    static inline void invoke(functor* o){
        (*fp)( info<T0>::typed::template revised<0>(o) , info<T1>::typed::template revised<1>(o) , info<T2>::typed::template revised<2>(o) );
    }
    static inline void cleanup(functor* o){
        info<T0>::typed::template deallocate<0>(o); info<T1>::typed::template deallocate<1>(o); info<T2>::typed::template deallocate<2>(o);
    }
    static inline bool ready(functor* o){
        return (info<T0>::typed::template ready<0>(o) && info<T1>::typed::template ready<1>(o) && info<T2>::typed::template ready<2>(o) && true);
    }
};
template< typename T0 , typename T1 , typename T2 , typename T3 , void(*fp)( T0& , T1& , T2& , T3& )>
struct kernel_inliner<void(*)( T0& , T1& , T2& , T3& ), fp> {
    typedef T0 t0; typedef T1 t1; typedef T2 t2; typedef T3 t3;
    static const int arity = 4;
    static inline void latch(functor* o, T0& arg0 , T1& arg1 , T2& arg2 , T3& arg3 ){
        if(selector.tunable()){
            info<T0>::typed::template score<0>(arg0); info<T1>::typed::template score<1>(arg1); info<T2>::typed::template score<2>(arg2); info<T3>::typed::template score<3>(arg3);
            selector.schedule();
        }
        if(selector.get_actor().remote()){
            info<T0>::typed::template modify_remote<0>(arg0); info<T1>::typed::template modify_remote<1>(arg1); info<T2>::typed::template modify_remote<2>(arg2); info<T3>::typed::template modify_remote<3>(arg3);
            return;
        }else if(selector.get_actor().local()){
            info<T0>::typed::template modify_local<0>(arg0, o); info<T1>::typed::template modify_local<1>(arg1, o); info<T2>::typed::template modify_local<2>(arg2, o); info<T3>::typed::template modify_local<3>(arg3, o);
        }else{
            info<T0>::typed::template modify<0>(arg0, o); info<T1>::typed::template modify<1>(arg1, o); info<T2>::typed::template modify<2>(arg2, o); info<T3>::typed::template modify<3>(arg3, o);
        }
        info<T0>::typed::template pin<0>(o) || info<T1>::typed::template pin<1>(o) || info<T2>::typed::template pin<2>(o) || info<T3>::typed::template pin<3>(o) ||
        selector.get_controller().queue(o);
    }
    static inline void invoke(functor* o){
        (*fp)( info<T0>::typed::template revised<0>(o) , info<T1>::typed::template revised<1>(o) , info<T2>::typed::template revised<2>(o) , info<T3>::typed::template revised<3>(o) );
    }
    static inline void cleanup(functor* o){
        info<T0>::typed::template deallocate<0>(o); info<T1>::typed::template deallocate<1>(o); info<T2>::typed::template deallocate<2>(o); info<T3>::typed::template deallocate<3>(o);
    }
    static inline bool ready(functor* o){
        return (info<T0>::typed::template ready<0>(o) && info<T1>::typed::template ready<1>(o) && info<T2>::typed::template ready<2>(o) && info<T3>::typed::template ready<3>(o) && true);
    }
};
template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , void(*fp)( T0& , T1& , T2& , T3& , T4& )>
struct kernel_inliner<void(*)( T0& , T1& , T2& , T3& , T4& ), fp> {
    typedef T0 t0; typedef T1 t1; typedef T2 t2; typedef T3 t3; typedef T4 t4;
    static const int arity = 5;
    static inline void latch(functor* o, T0& arg0 , T1& arg1 , T2& arg2 , T3& arg3 , T4& arg4 ){
        if(selector.tunable()){
            info<T0>::typed::template score<0>(arg0); info<T1>::typed::template score<1>(arg1); info<T2>::typed::template score<2>(arg2); info<T3>::typed::template score<3>(arg3); info<T4>::typed::template score<4>(arg4);
            selector.schedule();
        }
        if(selector.get_actor().remote()){
            info<T0>::typed::template modify_remote<0>(arg0); info<T1>::typed::template modify_remote<1>(arg1); info<T2>::typed::template modify_remote<2>(arg2); info<T3>::typed::template modify_remote<3>(arg3); info<T4>::typed::template modify_remote<4>(arg4);
            return;
        }else if(selector.get_actor().local()){
            info<T0>::typed::template modify_local<0>(arg0, o); info<T1>::typed::template modify_local<1>(arg1, o); info<T2>::typed::template modify_local<2>(arg2, o); info<T3>::typed::template modify_local<3>(arg3, o); info<T4>::typed::template modify_local<4>(arg4, o);
        }else{
            info<T0>::typed::template modify<0>(arg0, o); info<T1>::typed::template modify<1>(arg1, o); info<T2>::typed::template modify<2>(arg2, o); info<T3>::typed::template modify<3>(arg3, o); info<T4>::typed::template modify<4>(arg4, o);
        }
        info<T0>::typed::template pin<0>(o) || info<T1>::typed::template pin<1>(o) || info<T2>::typed::template pin<2>(o) || info<T3>::typed::template pin<3>(o) || info<T4>::typed::template pin<4>(o) ||
        selector.get_controller().queue(o);
    }
    static inline void invoke(functor* o){
        (*fp)( info<T0>::typed::template revised<0>(o) , info<T1>::typed::template revised<1>(o) , info<T2>::typed::template revised<2>(o) , info<T3>::typed::template revised<3>(o) , info<T4>::typed::template revised<4>(o) );
    }
    static inline void cleanup(functor* o){
        info<T0>::typed::template deallocate<0>(o); info<T1>::typed::template deallocate<1>(o); info<T2>::typed::template deallocate<2>(o); info<T3>::typed::template deallocate<3>(o); info<T4>::typed::template deallocate<4>(o);
    }
    static inline bool ready(functor* o){
        return (info<T0>::typed::template ready<0>(o) && info<T1>::typed::template ready<1>(o) && info<T2>::typed::template ready<2>(o) && info<T3>::typed::template ready<3>(o) && info<T4>::typed::template ready<4>(o) && true);
    }
};
template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , void(*fp)( T0& , T1& , T2& , T3& , T4& , T5& )>
struct kernel_inliner<void(*)( T0& , T1& , T2& , T3& , T4& , T5& ), fp> {
    typedef T0 t0; typedef T1 t1; typedef T2 t2; typedef T3 t3; typedef T4 t4; typedef T5 t5;
    static const int arity = 6;
    static inline void latch(functor* o, T0& arg0 , T1& arg1 , T2& arg2 , T3& arg3 , T4& arg4 , T5& arg5 ){
        if(selector.tunable()){
            info<T0>::typed::template score<0>(arg0); info<T1>::typed::template score<1>(arg1); info<T2>::typed::template score<2>(arg2); info<T3>::typed::template score<3>(arg3); info<T4>::typed::template score<4>(arg4); info<T5>::typed::template score<5>(arg5);
            selector.schedule();
        }
        if(selector.get_actor().remote()){
            info<T0>::typed::template modify_remote<0>(arg0); info<T1>::typed::template modify_remote<1>(arg1); info<T2>::typed::template modify_remote<2>(arg2); info<T3>::typed::template modify_remote<3>(arg3); info<T4>::typed::template modify_remote<4>(arg4); info<T5>::typed::template modify_remote<5>(arg5);
            return;
        }else if(selector.get_actor().local()){
            info<T0>::typed::template modify_local<0>(arg0, o); info<T1>::typed::template modify_local<1>(arg1, o); info<T2>::typed::template modify_local<2>(arg2, o); info<T3>::typed::template modify_local<3>(arg3, o); info<T4>::typed::template modify_local<4>(arg4, o); info<T5>::typed::template modify_local<5>(arg5, o);
        }else{
            info<T0>::typed::template modify<0>(arg0, o); info<T1>::typed::template modify<1>(arg1, o); info<T2>::typed::template modify<2>(arg2, o); info<T3>::typed::template modify<3>(arg3, o); info<T4>::typed::template modify<4>(arg4, o); info<T5>::typed::template modify<5>(arg5, o);
        }
        info<T0>::typed::template pin<0>(o) || info<T1>::typed::template pin<1>(o) || info<T2>::typed::template pin<2>(o) || info<T3>::typed::template pin<3>(o) || info<T4>::typed::template pin<4>(o) || info<T5>::typed::template pin<5>(o) ||
        selector.get_controller().queue(o);
    }
    static inline void invoke(functor* o){
        (*fp)( info<T0>::typed::template revised<0>(o) , info<T1>::typed::template revised<1>(o) , info<T2>::typed::template revised<2>(o) , info<T3>::typed::template revised<3>(o) , info<T4>::typed::template revised<4>(o) , info<T5>::typed::template revised<5>(o) );
    }
    static inline void cleanup(functor* o){
        info<T0>::typed::template deallocate<0>(o); info<T1>::typed::template deallocate<1>(o); info<T2>::typed::template deallocate<2>(o); info<T3>::typed::template deallocate<3>(o); info<T4>::typed::template deallocate<4>(o); info<T5>::typed::template deallocate<5>(o);
    }
    static inline bool ready(functor* o){
        return (info<T0>::typed::template ready<0>(o) && info<T1>::typed::template ready<1>(o) && info<T2>::typed::template ready<2>(o) && info<T3>::typed::template ready<3>(o) && info<T4>::typed::template ready<4>(o) && info<T5>::typed::template ready<5>(o) && true);
    }
};
template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , void(*fp)( T0& , T1& , T2& , T3& , T4& , T5& , T6& )>
struct kernel_inliner<void(*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& ), fp> {
    typedef T0 t0; typedef T1 t1; typedef T2 t2; typedef T3 t3; typedef T4 t4; typedef T5 t5; typedef T6 t6;
    static const int arity = 7;
    static inline void latch(functor* o, T0& arg0 , T1& arg1 , T2& arg2 , T3& arg3 , T4& arg4 , T5& arg5 , T6& arg6 ){
        if(selector.tunable()){
            info<T0>::typed::template score<0>(arg0); info<T1>::typed::template score<1>(arg1); info<T2>::typed::template score<2>(arg2); info<T3>::typed::template score<3>(arg3); info<T4>::typed::template score<4>(arg4); info<T5>::typed::template score<5>(arg5); info<T6>::typed::template score<6>(arg6);
            selector.schedule();
        }
        if(selector.get_actor().remote()){
            info<T0>::typed::template modify_remote<0>(arg0); info<T1>::typed::template modify_remote<1>(arg1); info<T2>::typed::template modify_remote<2>(arg2); info<T3>::typed::template modify_remote<3>(arg3); info<T4>::typed::template modify_remote<4>(arg4); info<T5>::typed::template modify_remote<5>(arg5); info<T6>::typed::template modify_remote<6>(arg6);
            return;
        }else if(selector.get_actor().local()){
            info<T0>::typed::template modify_local<0>(arg0, o); info<T1>::typed::template modify_local<1>(arg1, o); info<T2>::typed::template modify_local<2>(arg2, o); info<T3>::typed::template modify_local<3>(arg3, o); info<T4>::typed::template modify_local<4>(arg4, o); info<T5>::typed::template modify_local<5>(arg5, o); info<T6>::typed::template modify_local<6>(arg6, o);
        }else{
            info<T0>::typed::template modify<0>(arg0, o); info<T1>::typed::template modify<1>(arg1, o); info<T2>::typed::template modify<2>(arg2, o); info<T3>::typed::template modify<3>(arg3, o); info<T4>::typed::template modify<4>(arg4, o); info<T5>::typed::template modify<5>(arg5, o); info<T6>::typed::template modify<6>(arg6, o);
        }
        info<T0>::typed::template pin<0>(o) || info<T1>::typed::template pin<1>(o) || info<T2>::typed::template pin<2>(o) || info<T3>::typed::template pin<3>(o) || info<T4>::typed::template pin<4>(o) || info<T5>::typed::template pin<5>(o) || info<T6>::typed::template pin<6>(o) ||
        selector.get_controller().queue(o);
    }
    static inline void invoke(functor* o){
        (*fp)( info<T0>::typed::template revised<0>(o) , info<T1>::typed::template revised<1>(o) , info<T2>::typed::template revised<2>(o) , info<T3>::typed::template revised<3>(o) , info<T4>::typed::template revised<4>(o) , info<T5>::typed::template revised<5>(o) , info<T6>::typed::template revised<6>(o) );
    }
    static inline void cleanup(functor* o){
        info<T0>::typed::template deallocate<0>(o); info<T1>::typed::template deallocate<1>(o); info<T2>::typed::template deallocate<2>(o); info<T3>::typed::template deallocate<3>(o); info<T4>::typed::template deallocate<4>(o); info<T5>::typed::template deallocate<5>(o); info<T6>::typed::template deallocate<6>(o);
    }
    static inline bool ready(functor* o){
        return (info<T0>::typed::template ready<0>(o) && info<T1>::typed::template ready<1>(o) && info<T2>::typed::template ready<2>(o) && info<T3>::typed::template ready<3>(o) && info<T4>::typed::template ready<4>(o) && info<T5>::typed::template ready<5>(o) && info<T6>::typed::template ready<6>(o) && true);
    }
};
template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , void(*fp)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& )>
struct kernel_inliner<void(*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& ), fp> {
    typedef T0 t0; typedef T1 t1; typedef T2 t2; typedef T3 t3; typedef T4 t4; typedef T5 t5; typedef T6 t6; typedef T7 t7;
    static const int arity = 8;
    static inline void latch(functor* o, T0& arg0 , T1& arg1 , T2& arg2 , T3& arg3 , T4& arg4 , T5& arg5 , T6& arg6 , T7& arg7 ){
        if(selector.tunable()){
            info<T0>::typed::template score<0>(arg0); info<T1>::typed::template score<1>(arg1); info<T2>::typed::template score<2>(arg2); info<T3>::typed::template score<3>(arg3); info<T4>::typed::template score<4>(arg4); info<T5>::typed::template score<5>(arg5); info<T6>::typed::template score<6>(arg6); info<T7>::typed::template score<7>(arg7);
            selector.schedule();
        }
        if(selector.get_actor().remote()){
            info<T0>::typed::template modify_remote<0>(arg0); info<T1>::typed::template modify_remote<1>(arg1); info<T2>::typed::template modify_remote<2>(arg2); info<T3>::typed::template modify_remote<3>(arg3); info<T4>::typed::template modify_remote<4>(arg4); info<T5>::typed::template modify_remote<5>(arg5); info<T6>::typed::template modify_remote<6>(arg6); info<T7>::typed::template modify_remote<7>(arg7);
            return;
        }else if(selector.get_actor().local()){
            info<T0>::typed::template modify_local<0>(arg0, o); info<T1>::typed::template modify_local<1>(arg1, o); info<T2>::typed::template modify_local<2>(arg2, o); info<T3>::typed::template modify_local<3>(arg3, o); info<T4>::typed::template modify_local<4>(arg4, o); info<T5>::typed::template modify_local<5>(arg5, o); info<T6>::typed::template modify_local<6>(arg6, o); info<T7>::typed::template modify_local<7>(arg7, o);
        }else{
            info<T0>::typed::template modify<0>(arg0, o); info<T1>::typed::template modify<1>(arg1, o); info<T2>::typed::template modify<2>(arg2, o); info<T3>::typed::template modify<3>(arg3, o); info<T4>::typed::template modify<4>(arg4, o); info<T5>::typed::template modify<5>(arg5, o); info<T6>::typed::template modify<6>(arg6, o); info<T7>::typed::template modify<7>(arg7, o);
        }
        info<T0>::typed::template pin<0>(o) || info<T1>::typed::template pin<1>(o) || info<T2>::typed::template pin<2>(o) || info<T3>::typed::template pin<3>(o) || info<T4>::typed::template pin<4>(o) || info<T5>::typed::template pin<5>(o) || info<T6>::typed::template pin<6>(o) || info<T7>::typed::template pin<7>(o) ||
        selector.get_controller().queue(o);
    }
    static inline void invoke(functor* o){
        (*fp)( info<T0>::typed::template revised<0>(o) , info<T1>::typed::template revised<1>(o) , info<T2>::typed::template revised<2>(o) , info<T3>::typed::template revised<3>(o) , info<T4>::typed::template revised<4>(o) , info<T5>::typed::template revised<5>(o) , info<T6>::typed::template revised<6>(o) , info<T7>::typed::template revised<7>(o) );
    }
    static inline void cleanup(functor* o){
        info<T0>::typed::template deallocate<0>(o); info<T1>::typed::template deallocate<1>(o); info<T2>::typed::template deallocate<2>(o); info<T3>::typed::template deallocate<3>(o); info<T4>::typed::template deallocate<4>(o); info<T5>::typed::template deallocate<5>(o); info<T6>::typed::template deallocate<6>(o); info<T7>::typed::template deallocate<7>(o);
    }
    static inline bool ready(functor* o){
        return (info<T0>::typed::template ready<0>(o) && info<T1>::typed::template ready<1>(o) && info<T2>::typed::template ready<2>(o) && info<T3>::typed::template ready<3>(o) && info<T4>::typed::template ready<4>(o) && info<T5>::typed::template ready<5>(o) && info<T6>::typed::template ready<6>(o) && info<T7>::typed::template ready<7>(o) && true);
    }
};
template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , void(*fp)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& )>
struct kernel_inliner<void(*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& ), fp> {
    typedef T0 t0; typedef T1 t1; typedef T2 t2; typedef T3 t3; typedef T4 t4; typedef T5 t5; typedef T6 t6; typedef T7 t7; typedef T8 t8;
    static const int arity = 9;
    static inline void latch(functor* o, T0& arg0 , T1& arg1 , T2& arg2 , T3& arg3 , T4& arg4 , T5& arg5 , T6& arg6 , T7& arg7 , T8& arg8 ){
        if(selector.tunable()){
            info<T0>::typed::template score<0>(arg0); info<T1>::typed::template score<1>(arg1); info<T2>::typed::template score<2>(arg2); info<T3>::typed::template score<3>(arg3); info<T4>::typed::template score<4>(arg4); info<T5>::typed::template score<5>(arg5); info<T6>::typed::template score<6>(arg6); info<T7>::typed::template score<7>(arg7); info<T8>::typed::template score<8>(arg8);
            selector.schedule();
        }
        if(selector.get_actor().remote()){
            info<T0>::typed::template modify_remote<0>(arg0); info<T1>::typed::template modify_remote<1>(arg1); info<T2>::typed::template modify_remote<2>(arg2); info<T3>::typed::template modify_remote<3>(arg3); info<T4>::typed::template modify_remote<4>(arg4); info<T5>::typed::template modify_remote<5>(arg5); info<T6>::typed::template modify_remote<6>(arg6); info<T7>::typed::template modify_remote<7>(arg7); info<T8>::typed::template modify_remote<8>(arg8);
            return;
        }else if(selector.get_actor().local()){
            info<T0>::typed::template modify_local<0>(arg0, o); info<T1>::typed::template modify_local<1>(arg1, o); info<T2>::typed::template modify_local<2>(arg2, o); info<T3>::typed::template modify_local<3>(arg3, o); info<T4>::typed::template modify_local<4>(arg4, o); info<T5>::typed::template modify_local<5>(arg5, o); info<T6>::typed::template modify_local<6>(arg6, o); info<T7>::typed::template modify_local<7>(arg7, o); info<T8>::typed::template modify_local<8>(arg8, o);
        }else{
            info<T0>::typed::template modify<0>(arg0, o); info<T1>::typed::template modify<1>(arg1, o); info<T2>::typed::template modify<2>(arg2, o); info<T3>::typed::template modify<3>(arg3, o); info<T4>::typed::template modify<4>(arg4, o); info<T5>::typed::template modify<5>(arg5, o); info<T6>::typed::template modify<6>(arg6, o); info<T7>::typed::template modify<7>(arg7, o); info<T8>::typed::template modify<8>(arg8, o);
        }
        info<T0>::typed::template pin<0>(o) || info<T1>::typed::template pin<1>(o) || info<T2>::typed::template pin<2>(o) || info<T3>::typed::template pin<3>(o) || info<T4>::typed::template pin<4>(o) || info<T5>::typed::template pin<5>(o) || info<T6>::typed::template pin<6>(o) || info<T7>::typed::template pin<7>(o) || info<T8>::typed::template pin<8>(o) ||
        selector.get_controller().queue(o);
    }
    static inline void invoke(functor* o){
        (*fp)( info<T0>::typed::template revised<0>(o) , info<T1>::typed::template revised<1>(o) , info<T2>::typed::template revised<2>(o) , info<T3>::typed::template revised<3>(o) , info<T4>::typed::template revised<4>(o) , info<T5>::typed::template revised<5>(o) , info<T6>::typed::template revised<6>(o) , info<T7>::typed::template revised<7>(o) , info<T8>::typed::template revised<8>(o) );
    }
    static inline void cleanup(functor* o){
        info<T0>::typed::template deallocate<0>(o); info<T1>::typed::template deallocate<1>(o); info<T2>::typed::template deallocate<2>(o); info<T3>::typed::template deallocate<3>(o); info<T4>::typed::template deallocate<4>(o); info<T5>::typed::template deallocate<5>(o); info<T6>::typed::template deallocate<6>(o); info<T7>::typed::template deallocate<7>(o); info<T8>::typed::template deallocate<8>(o);
    }
    static inline bool ready(functor* o){
        return (info<T0>::typed::template ready<0>(o) && info<T1>::typed::template ready<1>(o) && info<T2>::typed::template ready<2>(o) && info<T3>::typed::template ready<3>(o) && info<T4>::typed::template ready<4>(o) && info<T5>::typed::template ready<5>(o) && info<T6>::typed::template ready<6>(o) && info<T7>::typed::template ready<7>(o) && info<T8>::typed::template ready<8>(o) && true);
    }
};
template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , void(*fp)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& , T9& )>
struct kernel_inliner<void(*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& , T9& ), fp> {
    typedef T0 t0; typedef T1 t1; typedef T2 t2; typedef T3 t3; typedef T4 t4; typedef T5 t5; typedef T6 t6; typedef T7 t7; typedef T8 t8; typedef T9 t9;
    static const int arity = 10;
    static inline void latch(functor* o, T0& arg0 , T1& arg1 , T2& arg2 , T3& arg3 , T4& arg4 , T5& arg5 , T6& arg6 , T7& arg7 , T8& arg8 , T9& arg9 ){
        if(selector.tunable()){
            info<T0>::typed::template score<0>(arg0); info<T1>::typed::template score<1>(arg1); info<T2>::typed::template score<2>(arg2); info<T3>::typed::template score<3>(arg3); info<T4>::typed::template score<4>(arg4); info<T5>::typed::template score<5>(arg5); info<T6>::typed::template score<6>(arg6); info<T7>::typed::template score<7>(arg7); info<T8>::typed::template score<8>(arg8); info<T9>::typed::template score<9>(arg9);
            selector.schedule();
        }
        if(selector.get_actor().remote()){
            info<T0>::typed::template modify_remote<0>(arg0); info<T1>::typed::template modify_remote<1>(arg1); info<T2>::typed::template modify_remote<2>(arg2); info<T3>::typed::template modify_remote<3>(arg3); info<T4>::typed::template modify_remote<4>(arg4); info<T5>::typed::template modify_remote<5>(arg5); info<T6>::typed::template modify_remote<6>(arg6); info<T7>::typed::template modify_remote<7>(arg7); info<T8>::typed::template modify_remote<8>(arg8); info<T9>::typed::template modify_remote<9>(arg9);
            return;
        }else if(selector.get_actor().local()){
            info<T0>::typed::template modify_local<0>(arg0, o); info<T1>::typed::template modify_local<1>(arg1, o); info<T2>::typed::template modify_local<2>(arg2, o); info<T3>::typed::template modify_local<3>(arg3, o); info<T4>::typed::template modify_local<4>(arg4, o); info<T5>::typed::template modify_local<5>(arg5, o); info<T6>::typed::template modify_local<6>(arg6, o); info<T7>::typed::template modify_local<7>(arg7, o); info<T8>::typed::template modify_local<8>(arg8, o); info<T9>::typed::template modify_local<9>(arg9, o);
        }else{
            info<T0>::typed::template modify<0>(arg0, o); info<T1>::typed::template modify<1>(arg1, o); info<T2>::typed::template modify<2>(arg2, o); info<T3>::typed::template modify<3>(arg3, o); info<T4>::typed::template modify<4>(arg4, o); info<T5>::typed::template modify<5>(arg5, o); info<T6>::typed::template modify<6>(arg6, o); info<T7>::typed::template modify<7>(arg7, o); info<T8>::typed::template modify<8>(arg8, o); info<T9>::typed::template modify<9>(arg9, o);
        }
        info<T0>::typed::template pin<0>(o) || info<T1>::typed::template pin<1>(o) || info<T2>::typed::template pin<2>(o) || info<T3>::typed::template pin<3>(o) || info<T4>::typed::template pin<4>(o) || info<T5>::typed::template pin<5>(o) || info<T6>::typed::template pin<6>(o) || info<T7>::typed::template pin<7>(o) || info<T8>::typed::template pin<8>(o) || info<T9>::typed::template pin<9>(o) ||
        selector.get_controller().queue(o);
    }
    static inline void invoke(functor* o){
        (*fp)( info<T0>::typed::template revised<0>(o) , info<T1>::typed::template revised<1>(o) , info<T2>::typed::template revised<2>(o) , info<T3>::typed::template revised<3>(o) , info<T4>::typed::template revised<4>(o) , info<T5>::typed::template revised<5>(o) , info<T6>::typed::template revised<6>(o) , info<T7>::typed::template revised<7>(o) , info<T8>::typed::template revised<8>(o) , info<T9>::typed::template revised<9>(o) );
    }
    static inline void cleanup(functor* o){
        info<T0>::typed::template deallocate<0>(o); info<T1>::typed::template deallocate<1>(o); info<T2>::typed::template deallocate<2>(o); info<T3>::typed::template deallocate<3>(o); info<T4>::typed::template deallocate<4>(o); info<T5>::typed::template deallocate<5>(o); info<T6>::typed::template deallocate<6>(o); info<T7>::typed::template deallocate<7>(o); info<T8>::typed::template deallocate<8>(o); info<T9>::typed::template deallocate<9>(o);
    }
    static inline bool ready(functor* o){
        return (info<T0>::typed::template ready<0>(o) && info<T1>::typed::template ready<1>(o) && info<T2>::typed::template ready<2>(o) && info<T3>::typed::template ready<3>(o) && info<T4>::typed::template ready<4>(o) && info<T5>::typed::template ready<5>(o) && info<T6>::typed::template ready<6>(o) && info<T7>::typed::template ready<7>(o) && info<T8>::typed::template ready<8>(o) && info<T9>::typed::template ready<9>(o) && true);
    }
};
template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , void(*fp)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& , T9& , T10& )>
struct kernel_inliner<void(*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& , T9& , T10& ), fp> {
    typedef T0 t0; typedef T1 t1; typedef T2 t2; typedef T3 t3; typedef T4 t4; typedef T5 t5; typedef T6 t6; typedef T7 t7; typedef T8 t8; typedef T9 t9; typedef T10 t10;
    static const int arity = 11;
    static inline void latch(functor* o, T0& arg0 , T1& arg1 , T2& arg2 , T3& arg3 , T4& arg4 , T5& arg5 , T6& arg6 , T7& arg7 , T8& arg8 , T9& arg9 , T10& arg10 ){
        if(selector.tunable()){
            info<T0>::typed::template score<0>(arg0); info<T1>::typed::template score<1>(arg1); info<T2>::typed::template score<2>(arg2); info<T3>::typed::template score<3>(arg3); info<T4>::typed::template score<4>(arg4); info<T5>::typed::template score<5>(arg5); info<T6>::typed::template score<6>(arg6); info<T7>::typed::template score<7>(arg7); info<T8>::typed::template score<8>(arg8); info<T9>::typed::template score<9>(arg9); info<T10>::typed::template score<10>(arg10);
            selector.schedule();
        }
        if(selector.get_actor().remote()){
            info<T0>::typed::template modify_remote<0>(arg0); info<T1>::typed::template modify_remote<1>(arg1); info<T2>::typed::template modify_remote<2>(arg2); info<T3>::typed::template modify_remote<3>(arg3); info<T4>::typed::template modify_remote<4>(arg4); info<T5>::typed::template modify_remote<5>(arg5); info<T6>::typed::template modify_remote<6>(arg6); info<T7>::typed::template modify_remote<7>(arg7); info<T8>::typed::template modify_remote<8>(arg8); info<T9>::typed::template modify_remote<9>(arg9); info<T10>::typed::template modify_remote<10>(arg10);
            return;
        }else if(selector.get_actor().local()){
            info<T0>::typed::template modify_local<0>(arg0, o); info<T1>::typed::template modify_local<1>(arg1, o); info<T2>::typed::template modify_local<2>(arg2, o); info<T3>::typed::template modify_local<3>(arg3, o); info<T4>::typed::template modify_local<4>(arg4, o); info<T5>::typed::template modify_local<5>(arg5, o); info<T6>::typed::template modify_local<6>(arg6, o); info<T7>::typed::template modify_local<7>(arg7, o); info<T8>::typed::template modify_local<8>(arg8, o); info<T9>::typed::template modify_local<9>(arg9, o); info<T10>::typed::template modify_local<10>(arg10, o);
        }else{
            info<T0>::typed::template modify<0>(arg0, o); info<T1>::typed::template modify<1>(arg1, o); info<T2>::typed::template modify<2>(arg2, o); info<T3>::typed::template modify<3>(arg3, o); info<T4>::typed::template modify<4>(arg4, o); info<T5>::typed::template modify<5>(arg5, o); info<T6>::typed::template modify<6>(arg6, o); info<T7>::typed::template modify<7>(arg7, o); info<T8>::typed::template modify<8>(arg8, o); info<T9>::typed::template modify<9>(arg9, o); info<T10>::typed::template modify<10>(arg10, o);
        }
        info<T0>::typed::template pin<0>(o) || info<T1>::typed::template pin<1>(o) || info<T2>::typed::template pin<2>(o) || info<T3>::typed::template pin<3>(o) || info<T4>::typed::template pin<4>(o) || info<T5>::typed::template pin<5>(o) || info<T6>::typed::template pin<6>(o) || info<T7>::typed::template pin<7>(o) || info<T8>::typed::template pin<8>(o) || info<T9>::typed::template pin<9>(o) || info<T10>::typed::template pin<10>(o) ||
        selector.get_controller().queue(o);
    }
    static inline void invoke(functor* o){
        (*fp)( info<T0>::typed::template revised<0>(o) , info<T1>::typed::template revised<1>(o) , info<T2>::typed::template revised<2>(o) , info<T3>::typed::template revised<3>(o) , info<T4>::typed::template revised<4>(o) , info<T5>::typed::template revised<5>(o) , info<T6>::typed::template revised<6>(o) , info<T7>::typed::template revised<7>(o) , info<T8>::typed::template revised<8>(o) , info<T9>::typed::template revised<9>(o) , info<T10>::typed::template revised<10>(o) );
    }
    static inline void cleanup(functor* o){
        info<T0>::typed::template deallocate<0>(o); info<T1>::typed::template deallocate<1>(o); info<T2>::typed::template deallocate<2>(o); info<T3>::typed::template deallocate<3>(o); info<T4>::typed::template deallocate<4>(o); info<T5>::typed::template deallocate<5>(o); info<T6>::typed::template deallocate<6>(o); info<T7>::typed::template deallocate<7>(o); info<T8>::typed::template deallocate<8>(o); info<T9>::typed::template deallocate<9>(o); info<T10>::typed::template deallocate<10>(o);
    }
    static inline bool ready(functor* o){
        return (info<T0>::typed::template ready<0>(o) && info<T1>::typed::template ready<1>(o) && info<T2>::typed::template ready<2>(o) && info<T3>::typed::template ready<3>(o) && info<T4>::typed::template ready<4>(o) && info<T5>::typed::template ready<5>(o) && info<T6>::typed::template ready<6>(o) && info<T7>::typed::template ready<7>(o) && info<T8>::typed::template ready<8>(o) && info<T9>::typed::template ready<9>(o) && info<T10>::typed::template ready<10>(o) && true);
    }
};
template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , void(*fp)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& , T9& , T10& , T11& )>
struct kernel_inliner<void(*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& , T9& , T10& , T11& ), fp> {
    typedef T0 t0; typedef T1 t1; typedef T2 t2; typedef T3 t3; typedef T4 t4; typedef T5 t5; typedef T6 t6; typedef T7 t7; typedef T8 t8; typedef T9 t9; typedef T10 t10; typedef T11 t11;
    static const int arity = 12;
    static inline void latch(functor* o, T0& arg0 , T1& arg1 , T2& arg2 , T3& arg3 , T4& arg4 , T5& arg5 , T6& arg6 , T7& arg7 , T8& arg8 , T9& arg9 , T10& arg10 , T11& arg11 ){
        if(selector.tunable()){
            info<T0>::typed::template score<0>(arg0); info<T1>::typed::template score<1>(arg1); info<T2>::typed::template score<2>(arg2); info<T3>::typed::template score<3>(arg3); info<T4>::typed::template score<4>(arg4); info<T5>::typed::template score<5>(arg5); info<T6>::typed::template score<6>(arg6); info<T7>::typed::template score<7>(arg7); info<T8>::typed::template score<8>(arg8); info<T9>::typed::template score<9>(arg9); info<T10>::typed::template score<10>(arg10); info<T11>::typed::template score<11>(arg11);
            selector.schedule();
        }
        if(selector.get_actor().remote()){
            info<T0>::typed::template modify_remote<0>(arg0); info<T1>::typed::template modify_remote<1>(arg1); info<T2>::typed::template modify_remote<2>(arg2); info<T3>::typed::template modify_remote<3>(arg3); info<T4>::typed::template modify_remote<4>(arg4); info<T5>::typed::template modify_remote<5>(arg5); info<T6>::typed::template modify_remote<6>(arg6); info<T7>::typed::template modify_remote<7>(arg7); info<T8>::typed::template modify_remote<8>(arg8); info<T9>::typed::template modify_remote<9>(arg9); info<T10>::typed::template modify_remote<10>(arg10); info<T11>::typed::template modify_remote<11>(arg11);
            return;
        }else if(selector.get_actor().local()){
            info<T0>::typed::template modify_local<0>(arg0, o); info<T1>::typed::template modify_local<1>(arg1, o); info<T2>::typed::template modify_local<2>(arg2, o); info<T3>::typed::template modify_local<3>(arg3, o); info<T4>::typed::template modify_local<4>(arg4, o); info<T5>::typed::template modify_local<5>(arg5, o); info<T6>::typed::template modify_local<6>(arg6, o); info<T7>::typed::template modify_local<7>(arg7, o); info<T8>::typed::template modify_local<8>(arg8, o); info<T9>::typed::template modify_local<9>(arg9, o); info<T10>::typed::template modify_local<10>(arg10, o); info<T11>::typed::template modify_local<11>(arg11, o);
        }else{
            info<T0>::typed::template modify<0>(arg0, o); info<T1>::typed::template modify<1>(arg1, o); info<T2>::typed::template modify<2>(arg2, o); info<T3>::typed::template modify<3>(arg3, o); info<T4>::typed::template modify<4>(arg4, o); info<T5>::typed::template modify<5>(arg5, o); info<T6>::typed::template modify<6>(arg6, o); info<T7>::typed::template modify<7>(arg7, o); info<T8>::typed::template modify<8>(arg8, o); info<T9>::typed::template modify<9>(arg9, o); info<T10>::typed::template modify<10>(arg10, o); info<T11>::typed::template modify<11>(arg11, o);
        }
        info<T0>::typed::template pin<0>(o) || info<T1>::typed::template pin<1>(o) || info<T2>::typed::template pin<2>(o) || info<T3>::typed::template pin<3>(o) || info<T4>::typed::template pin<4>(o) || info<T5>::typed::template pin<5>(o) || info<T6>::typed::template pin<6>(o) || info<T7>::typed::template pin<7>(o) || info<T8>::typed::template pin<8>(o) || info<T9>::typed::template pin<9>(o) || info<T10>::typed::template pin<10>(o) || info<T11>::typed::template pin<11>(o) ||
        selector.get_controller().queue(o);
    }
    static inline void invoke(functor* o){
        (*fp)( info<T0>::typed::template revised<0>(o) , info<T1>::typed::template revised<1>(o) , info<T2>::typed::template revised<2>(o) , info<T3>::typed::template revised<3>(o) , info<T4>::typed::template revised<4>(o) , info<T5>::typed::template revised<5>(o) , info<T6>::typed::template revised<6>(o) , info<T7>::typed::template revised<7>(o) , info<T8>::typed::template revised<8>(o) , info<T9>::typed::template revised<9>(o) , info<T10>::typed::template revised<10>(o) , info<T11>::typed::template revised<11>(o) );
    }
    static inline void cleanup(functor* o){
        info<T0>::typed::template deallocate<0>(o); info<T1>::typed::template deallocate<1>(o); info<T2>::typed::template deallocate<2>(o); info<T3>::typed::template deallocate<3>(o); info<T4>::typed::template deallocate<4>(o); info<T5>::typed::template deallocate<5>(o); info<T6>::typed::template deallocate<6>(o); info<T7>::typed::template deallocate<7>(o); info<T8>::typed::template deallocate<8>(o); info<T9>::typed::template deallocate<9>(o); info<T10>::typed::template deallocate<10>(o); info<T11>::typed::template deallocate<11>(o);
    }
    static inline bool ready(functor* o){
        return (info<T0>::typed::template ready<0>(o) && info<T1>::typed::template ready<1>(o) && info<T2>::typed::template ready<2>(o) && info<T3>::typed::template ready<3>(o) && info<T4>::typed::template ready<4>(o) && info<T5>::typed::template ready<5>(o) && info<T6>::typed::template ready<6>(o) && info<T7>::typed::template ready<7>(o) && info<T8>::typed::template ready<8>(o) && info<T9>::typed::template ready<9>(o) && info<T10>::typed::template ready<10>(o) && info<T11>::typed::template ready<11>(o) && true);
    }
};
template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , void(*fp)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& , T9& , T10& , T11& , T12& )>
struct kernel_inliner<void(*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& , T9& , T10& , T11& , T12& ), fp> {
    typedef T0 t0; typedef T1 t1; typedef T2 t2; typedef T3 t3; typedef T4 t4; typedef T5 t5; typedef T6 t6; typedef T7 t7; typedef T8 t8; typedef T9 t9; typedef T10 t10; typedef T11 t11; typedef T12 t12;
    static const int arity = 13;
    static inline void latch(functor* o, T0& arg0 , T1& arg1 , T2& arg2 , T3& arg3 , T4& arg4 , T5& arg5 , T6& arg6 , T7& arg7 , T8& arg8 , T9& arg9 , T10& arg10 , T11& arg11 , T12& arg12 ){
        if(selector.tunable()){
            info<T0>::typed::template score<0>(arg0); info<T1>::typed::template score<1>(arg1); info<T2>::typed::template score<2>(arg2); info<T3>::typed::template score<3>(arg3); info<T4>::typed::template score<4>(arg4); info<T5>::typed::template score<5>(arg5); info<T6>::typed::template score<6>(arg6); info<T7>::typed::template score<7>(arg7); info<T8>::typed::template score<8>(arg8); info<T9>::typed::template score<9>(arg9); info<T10>::typed::template score<10>(arg10); info<T11>::typed::template score<11>(arg11); info<T12>::typed::template score<12>(arg12);
            selector.schedule();
        }
        if(selector.get_actor().remote()){
            info<T0>::typed::template modify_remote<0>(arg0); info<T1>::typed::template modify_remote<1>(arg1); info<T2>::typed::template modify_remote<2>(arg2); info<T3>::typed::template modify_remote<3>(arg3); info<T4>::typed::template modify_remote<4>(arg4); info<T5>::typed::template modify_remote<5>(arg5); info<T6>::typed::template modify_remote<6>(arg6); info<T7>::typed::template modify_remote<7>(arg7); info<T8>::typed::template modify_remote<8>(arg8); info<T9>::typed::template modify_remote<9>(arg9); info<T10>::typed::template modify_remote<10>(arg10); info<T11>::typed::template modify_remote<11>(arg11); info<T12>::typed::template modify_remote<12>(arg12);
            return;
        }else if(selector.get_actor().local()){
            info<T0>::typed::template modify_local<0>(arg0, o); info<T1>::typed::template modify_local<1>(arg1, o); info<T2>::typed::template modify_local<2>(arg2, o); info<T3>::typed::template modify_local<3>(arg3, o); info<T4>::typed::template modify_local<4>(arg4, o); info<T5>::typed::template modify_local<5>(arg5, o); info<T6>::typed::template modify_local<6>(arg6, o); info<T7>::typed::template modify_local<7>(arg7, o); info<T8>::typed::template modify_local<8>(arg8, o); info<T9>::typed::template modify_local<9>(arg9, o); info<T10>::typed::template modify_local<10>(arg10, o); info<T11>::typed::template modify_local<11>(arg11, o); info<T12>::typed::template modify_local<12>(arg12, o);
        }else{
            info<T0>::typed::template modify<0>(arg0, o); info<T1>::typed::template modify<1>(arg1, o); info<T2>::typed::template modify<2>(arg2, o); info<T3>::typed::template modify<3>(arg3, o); info<T4>::typed::template modify<4>(arg4, o); info<T5>::typed::template modify<5>(arg5, o); info<T6>::typed::template modify<6>(arg6, o); info<T7>::typed::template modify<7>(arg7, o); info<T8>::typed::template modify<8>(arg8, o); info<T9>::typed::template modify<9>(arg9, o); info<T10>::typed::template modify<10>(arg10, o); info<T11>::typed::template modify<11>(arg11, o); info<T12>::typed::template modify<12>(arg12, o);
        }
        info<T0>::typed::template pin<0>(o) || info<T1>::typed::template pin<1>(o) || info<T2>::typed::template pin<2>(o) || info<T3>::typed::template pin<3>(o) || info<T4>::typed::template pin<4>(o) || info<T5>::typed::template pin<5>(o) || info<T6>::typed::template pin<6>(o) || info<T7>::typed::template pin<7>(o) || info<T8>::typed::template pin<8>(o) || info<T9>::typed::template pin<9>(o) || info<T10>::typed::template pin<10>(o) || info<T11>::typed::template pin<11>(o) || info<T12>::typed::template pin<12>(o) ||
        selector.get_controller().queue(o);
    }
    static inline void invoke(functor* o){
        (*fp)( info<T0>::typed::template revised<0>(o) , info<T1>::typed::template revised<1>(o) , info<T2>::typed::template revised<2>(o) , info<T3>::typed::template revised<3>(o) , info<T4>::typed::template revised<4>(o) , info<T5>::typed::template revised<5>(o) , info<T6>::typed::template revised<6>(o) , info<T7>::typed::template revised<7>(o) , info<T8>::typed::template revised<8>(o) , info<T9>::typed::template revised<9>(o) , info<T10>::typed::template revised<10>(o) , info<T11>::typed::template revised<11>(o) , info<T12>::typed::template revised<12>(o) );
    }
    static inline void cleanup(functor* o){
        info<T0>::typed::template deallocate<0>(o); info<T1>::typed::template deallocate<1>(o); info<T2>::typed::template deallocate<2>(o); info<T3>::typed::template deallocate<3>(o); info<T4>::typed::template deallocate<4>(o); info<T5>::typed::template deallocate<5>(o); info<T6>::typed::template deallocate<6>(o); info<T7>::typed::template deallocate<7>(o); info<T8>::typed::template deallocate<8>(o); info<T9>::typed::template deallocate<9>(o); info<T10>::typed::template deallocate<10>(o); info<T11>::typed::template deallocate<11>(o); info<T12>::typed::template deallocate<12>(o);
    }
    static inline bool ready(functor* o){
        return (info<T0>::typed::template ready<0>(o) && info<T1>::typed::template ready<1>(o) && info<T2>::typed::template ready<2>(o) && info<T3>::typed::template ready<3>(o) && info<T4>::typed::template ready<4>(o) && info<T5>::typed::template ready<5>(o) && info<T6>::typed::template ready<6>(o) && info<T7>::typed::template ready<7>(o) && info<T8>::typed::template ready<8>(o) && info<T9>::typed::template ready<9>(o) && info<T10>::typed::template ready<10>(o) && info<T11>::typed::template ready<11>(o) && info<T12>::typed::template ready<12>(o) && true);
    }
};
template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , void(*fp)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& , T9& , T10& , T11& , T12& , T13& )>
struct kernel_inliner<void(*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& , T9& , T10& , T11& , T12& , T13& ), fp> {
    typedef T0 t0; typedef T1 t1; typedef T2 t2; typedef T3 t3; typedef T4 t4; typedef T5 t5; typedef T6 t6; typedef T7 t7; typedef T8 t8; typedef T9 t9; typedef T10 t10; typedef T11 t11; typedef T12 t12; typedef T13 t13;
    static const int arity = 14;
    static inline void latch(functor* o, T0& arg0 , T1& arg1 , T2& arg2 , T3& arg3 , T4& arg4 , T5& arg5 , T6& arg6 , T7& arg7 , T8& arg8 , T9& arg9 , T10& arg10 , T11& arg11 , T12& arg12 , T13& arg13 ){
        if(selector.tunable()){
            info<T0>::typed::template score<0>(arg0); info<T1>::typed::template score<1>(arg1); info<T2>::typed::template score<2>(arg2); info<T3>::typed::template score<3>(arg3); info<T4>::typed::template score<4>(arg4); info<T5>::typed::template score<5>(arg5); info<T6>::typed::template score<6>(arg6); info<T7>::typed::template score<7>(arg7); info<T8>::typed::template score<8>(arg8); info<T9>::typed::template score<9>(arg9); info<T10>::typed::template score<10>(arg10); info<T11>::typed::template score<11>(arg11); info<T12>::typed::template score<12>(arg12); info<T13>::typed::template score<13>(arg13);
            selector.schedule();
        }
        if(selector.get_actor().remote()){
            info<T0>::typed::template modify_remote<0>(arg0); info<T1>::typed::template modify_remote<1>(arg1); info<T2>::typed::template modify_remote<2>(arg2); info<T3>::typed::template modify_remote<3>(arg3); info<T4>::typed::template modify_remote<4>(arg4); info<T5>::typed::template modify_remote<5>(arg5); info<T6>::typed::template modify_remote<6>(arg6); info<T7>::typed::template modify_remote<7>(arg7); info<T8>::typed::template modify_remote<8>(arg8); info<T9>::typed::template modify_remote<9>(arg9); info<T10>::typed::template modify_remote<10>(arg10); info<T11>::typed::template modify_remote<11>(arg11); info<T12>::typed::template modify_remote<12>(arg12); info<T13>::typed::template modify_remote<13>(arg13);
            return;
        }else if(selector.get_actor().local()){
            info<T0>::typed::template modify_local<0>(arg0, o); info<T1>::typed::template modify_local<1>(arg1, o); info<T2>::typed::template modify_local<2>(arg2, o); info<T3>::typed::template modify_local<3>(arg3, o); info<T4>::typed::template modify_local<4>(arg4, o); info<T5>::typed::template modify_local<5>(arg5, o); info<T6>::typed::template modify_local<6>(arg6, o); info<T7>::typed::template modify_local<7>(arg7, o); info<T8>::typed::template modify_local<8>(arg8, o); info<T9>::typed::template modify_local<9>(arg9, o); info<T10>::typed::template modify_local<10>(arg10, o); info<T11>::typed::template modify_local<11>(arg11, o); info<T12>::typed::template modify_local<12>(arg12, o); info<T13>::typed::template modify_local<13>(arg13, o);
        }else{
            info<T0>::typed::template modify<0>(arg0, o); info<T1>::typed::template modify<1>(arg1, o); info<T2>::typed::template modify<2>(arg2, o); info<T3>::typed::template modify<3>(arg3, o); info<T4>::typed::template modify<4>(arg4, o); info<T5>::typed::template modify<5>(arg5, o); info<T6>::typed::template modify<6>(arg6, o); info<T7>::typed::template modify<7>(arg7, o); info<T8>::typed::template modify<8>(arg8, o); info<T9>::typed::template modify<9>(arg9, o); info<T10>::typed::template modify<10>(arg10, o); info<T11>::typed::template modify<11>(arg11, o); info<T12>::typed::template modify<12>(arg12, o); info<T13>::typed::template modify<13>(arg13, o);
        }
        info<T0>::typed::template pin<0>(o) || info<T1>::typed::template pin<1>(o) || info<T2>::typed::template pin<2>(o) || info<T3>::typed::template pin<3>(o) || info<T4>::typed::template pin<4>(o) || info<T5>::typed::template pin<5>(o) || info<T6>::typed::template pin<6>(o) || info<T7>::typed::template pin<7>(o) || info<T8>::typed::template pin<8>(o) || info<T9>::typed::template pin<9>(o) || info<T10>::typed::template pin<10>(o) || info<T11>::typed::template pin<11>(o) || info<T12>::typed::template pin<12>(o) || info<T13>::typed::template pin<13>(o) ||
        selector.get_controller().queue(o);
    }
    static inline void invoke(functor* o){
        (*fp)( info<T0>::typed::template revised<0>(o) , info<T1>::typed::template revised<1>(o) , info<T2>::typed::template revised<2>(o) , info<T3>::typed::template revised<3>(o) , info<T4>::typed::template revised<4>(o) , info<T5>::typed::template revised<5>(o) , info<T6>::typed::template revised<6>(o) , info<T7>::typed::template revised<7>(o) , info<T8>::typed::template revised<8>(o) , info<T9>::typed::template revised<9>(o) , info<T10>::typed::template revised<10>(o) , info<T11>::typed::template revised<11>(o) , info<T12>::typed::template revised<12>(o) , info<T13>::typed::template revised<13>(o) );
    }
    static inline void cleanup(functor* o){
        info<T0>::typed::template deallocate<0>(o); info<T1>::typed::template deallocate<1>(o); info<T2>::typed::template deallocate<2>(o); info<T3>::typed::template deallocate<3>(o); info<T4>::typed::template deallocate<4>(o); info<T5>::typed::template deallocate<5>(o); info<T6>::typed::template deallocate<6>(o); info<T7>::typed::template deallocate<7>(o); info<T8>::typed::template deallocate<8>(o); info<T9>::typed::template deallocate<9>(o); info<T10>::typed::template deallocate<10>(o); info<T11>::typed::template deallocate<11>(o); info<T12>::typed::template deallocate<12>(o); info<T13>::typed::template deallocate<13>(o);
    }
    static inline bool ready(functor* o){
        return (info<T0>::typed::template ready<0>(o) && info<T1>::typed::template ready<1>(o) && info<T2>::typed::template ready<2>(o) && info<T3>::typed::template ready<3>(o) && info<T4>::typed::template ready<4>(o) && info<T5>::typed::template ready<5>(o) && info<T6>::typed::template ready<6>(o) && info<T7>::typed::template ready<7>(o) && info<T8>::typed::template ready<8>(o) && info<T9>::typed::template ready<9>(o) && info<T10>::typed::template ready<10>(o) && info<T11>::typed::template ready<11>(o) && info<T12>::typed::template ready<12>(o) && info<T13>::typed::template ready<13>(o) && true);
    }
};
template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , void(*fp)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& , T9& , T10& , T11& , T12& , T13& , T14& )>
struct kernel_inliner<void(*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& , T9& , T10& , T11& , T12& , T13& , T14& ), fp> {
    typedef T0 t0; typedef T1 t1; typedef T2 t2; typedef T3 t3; typedef T4 t4; typedef T5 t5; typedef T6 t6; typedef T7 t7; typedef T8 t8; typedef T9 t9; typedef T10 t10; typedef T11 t11; typedef T12 t12; typedef T13 t13; typedef T14 t14;
    static const int arity = 15;
    static inline void latch(functor* o, T0& arg0 , T1& arg1 , T2& arg2 , T3& arg3 , T4& arg4 , T5& arg5 , T6& arg6 , T7& arg7 , T8& arg8 , T9& arg9 , T10& arg10 , T11& arg11 , T12& arg12 , T13& arg13 , T14& arg14 ){
        if(selector.tunable()){
            info<T0>::typed::template score<0>(arg0); info<T1>::typed::template score<1>(arg1); info<T2>::typed::template score<2>(arg2); info<T3>::typed::template score<3>(arg3); info<T4>::typed::template score<4>(arg4); info<T5>::typed::template score<5>(arg5); info<T6>::typed::template score<6>(arg6); info<T7>::typed::template score<7>(arg7); info<T8>::typed::template score<8>(arg8); info<T9>::typed::template score<9>(arg9); info<T10>::typed::template score<10>(arg10); info<T11>::typed::template score<11>(arg11); info<T12>::typed::template score<12>(arg12); info<T13>::typed::template score<13>(arg13); info<T14>::typed::template score<14>(arg14);
            selector.schedule();
        }
        if(selector.get_actor().remote()){
            info<T0>::typed::template modify_remote<0>(arg0); info<T1>::typed::template modify_remote<1>(arg1); info<T2>::typed::template modify_remote<2>(arg2); info<T3>::typed::template modify_remote<3>(arg3); info<T4>::typed::template modify_remote<4>(arg4); info<T5>::typed::template modify_remote<5>(arg5); info<T6>::typed::template modify_remote<6>(arg6); info<T7>::typed::template modify_remote<7>(arg7); info<T8>::typed::template modify_remote<8>(arg8); info<T9>::typed::template modify_remote<9>(arg9); info<T10>::typed::template modify_remote<10>(arg10); info<T11>::typed::template modify_remote<11>(arg11); info<T12>::typed::template modify_remote<12>(arg12); info<T13>::typed::template modify_remote<13>(arg13); info<T14>::typed::template modify_remote<14>(arg14);
            return;
        }else if(selector.get_actor().local()){
            info<T0>::typed::template modify_local<0>(arg0, o); info<T1>::typed::template modify_local<1>(arg1, o); info<T2>::typed::template modify_local<2>(arg2, o); info<T3>::typed::template modify_local<3>(arg3, o); info<T4>::typed::template modify_local<4>(arg4, o); info<T5>::typed::template modify_local<5>(arg5, o); info<T6>::typed::template modify_local<6>(arg6, o); info<T7>::typed::template modify_local<7>(arg7, o); info<T8>::typed::template modify_local<8>(arg8, o); info<T9>::typed::template modify_local<9>(arg9, o); info<T10>::typed::template modify_local<10>(arg10, o); info<T11>::typed::template modify_local<11>(arg11, o); info<T12>::typed::template modify_local<12>(arg12, o); info<T13>::typed::template modify_local<13>(arg13, o); info<T14>::typed::template modify_local<14>(arg14, o);
        }else{
            info<T0>::typed::template modify<0>(arg0, o); info<T1>::typed::template modify<1>(arg1, o); info<T2>::typed::template modify<2>(arg2, o); info<T3>::typed::template modify<3>(arg3, o); info<T4>::typed::template modify<4>(arg4, o); info<T5>::typed::template modify<5>(arg5, o); info<T6>::typed::template modify<6>(arg6, o); info<T7>::typed::template modify<7>(arg7, o); info<T8>::typed::template modify<8>(arg8, o); info<T9>::typed::template modify<9>(arg9, o); info<T10>::typed::template modify<10>(arg10, o); info<T11>::typed::template modify<11>(arg11, o); info<T12>::typed::template modify<12>(arg12, o); info<T13>::typed::template modify<13>(arg13, o); info<T14>::typed::template modify<14>(arg14, o);
        }
        info<T0>::typed::template pin<0>(o) || info<T1>::typed::template pin<1>(o) || info<T2>::typed::template pin<2>(o) || info<T3>::typed::template pin<3>(o) || info<T4>::typed::template pin<4>(o) || info<T5>::typed::template pin<5>(o) || info<T6>::typed::template pin<6>(o) || info<T7>::typed::template pin<7>(o) || info<T8>::typed::template pin<8>(o) || info<T9>::typed::template pin<9>(o) || info<T10>::typed::template pin<10>(o) || info<T11>::typed::template pin<11>(o) || info<T12>::typed::template pin<12>(o) || info<T13>::typed::template pin<13>(o) || info<T14>::typed::template pin<14>(o) ||
        selector.get_controller().queue(o);
    }
    static inline void invoke(functor* o){
        (*fp)( info<T0>::typed::template revised<0>(o) , info<T1>::typed::template revised<1>(o) , info<T2>::typed::template revised<2>(o) , info<T3>::typed::template revised<3>(o) , info<T4>::typed::template revised<4>(o) , info<T5>::typed::template revised<5>(o) , info<T6>::typed::template revised<6>(o) , info<T7>::typed::template revised<7>(o) , info<T8>::typed::template revised<8>(o) , info<T9>::typed::template revised<9>(o) , info<T10>::typed::template revised<10>(o) , info<T11>::typed::template revised<11>(o) , info<T12>::typed::template revised<12>(o) , info<T13>::typed::template revised<13>(o) , info<T14>::typed::template revised<14>(o) );
    }
    static inline void cleanup(functor* o){
        info<T0>::typed::template deallocate<0>(o); info<T1>::typed::template deallocate<1>(o); info<T2>::typed::template deallocate<2>(o); info<T3>::typed::template deallocate<3>(o); info<T4>::typed::template deallocate<4>(o); info<T5>::typed::template deallocate<5>(o); info<T6>::typed::template deallocate<6>(o); info<T7>::typed::template deallocate<7>(o); info<T8>::typed::template deallocate<8>(o); info<T9>::typed::template deallocate<9>(o); info<T10>::typed::template deallocate<10>(o); info<T11>::typed::template deallocate<11>(o); info<T12>::typed::template deallocate<12>(o); info<T13>::typed::template deallocate<13>(o); info<T14>::typed::template deallocate<14>(o);
    }
    static inline bool ready(functor* o){
        return (info<T0>::typed::template ready<0>(o) && info<T1>::typed::template ready<1>(o) && info<T2>::typed::template ready<2>(o) && info<T3>::typed::template ready<3>(o) && info<T4>::typed::template ready<4>(o) && info<T5>::typed::template ready<5>(o) && info<T6>::typed::template ready<6>(o) && info<T7>::typed::template ready<7>(o) && info<T8>::typed::template ready<8>(o) && info<T9>::typed::template ready<9>(o) && info<T10>::typed::template ready<10>(o) && info<T11>::typed::template ready<11>(o) && info<T12>::typed::template ready<12>(o) && info<T13>::typed::template ready<13>(o) && info<T14>::typed::template ready<14>(o) && true);
    }
};
