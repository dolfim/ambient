/*
 * Copyright Institute for Theoretical Physics, ETH Zurich 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef AMBIENT_INTERFACE_ALLOCATOR
#define AMBIENT_INTERFACE_ALLOCATOR

namespace ambient {

    using model::history;

    class default_allocator {
    public:
        static void* alloc(memory::descriptor& spec){ return ambient::memory::malloc(spec); }
        static void* calloc(memory::descriptor& spec){ void* m = alloc(spec); memset(m, 0, spec.extent); return m; }
        static void free(void* ptr, memory::descriptor& spec){ ambient::memory::free(ptr, spec); }
    };

    namespace detail {
        template <typename T>
        struct has_allocator {
            template <typename T1> static typename T1::allocator_base_type test(int);
            template <typename>    static void test(...);
            enum { value = !std::is_void<decltype(test<T>(0))>::value };
        };
        template <bool HAS, typename T> struct checked_get_allocator {};
        template <typename T> struct checked_get_allocator<true, T> { typedef typename T::allocator_base_type type; };
        template <typename T> struct checked_get_allocator<false, T> { typedef default_allocator type; };
        template <typename T> struct get_allocator { typedef typename checked_get_allocator<has_allocator<T>::value, T>::type type; };
    }

    template<typename Mapping, bool Proxy>
    struct allocator : public detail::get_allocator<Mapping>::type {
        typedef Mapping mapping;
        allocator(const allocator&) = delete;
        allocator& operator=(const allocator&) = delete;
        allocator(){ }
        allocator(size_t ts, size_t m = 1, size_t n = 1){
            desc = new history(dim2(n,m),ts);
        }
        ~allocator(){
            if(desc->weak()) delete desc;
            else destroy(desc);
        }
        history* desc;
    };

    template<typename Mapping>
    struct allocator<Mapping, true> : public detail::get_allocator<Mapping>::type {
        typedef Mapping mapping;
        allocator() = delete;
        allocator(const allocator<Mapping, false>& other) : desc(other.desc) { }
        history* desc; // non-owning proxy
    };
}

#endif
