/*
 * Copyright Institute for Theoretical Physics, ETH Zurich 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef AMBIENT_CONTAINER_ITERATOR_BLOCK_TUPLE_ITERATOR
#define AMBIENT_CONTAINER_ITERATOR_BLOCK_TUPLE_ITERATOR

namespace ambient {

    namespace expand {
        template<size_t I, int Limit, typename O> 
        typename std::enable_if<I == Limit, void>::type latch_position(O&){
        }
        template<size_t I, int Limit, typename O> 
        typename std::enable_if<I < Limit, void>::type latch_position(O& obj){
            obj.template latch_position<I>();
            latch_position<I + 1, Limit>(obj);
        }

        template<size_t I, int Limit, typename O>
        typename std::enable_if<I == Limit, void>::type advance(O&){
        }
        template<size_t I, int Limit, typename O>
        typename std::enable_if<I < Limit, void>::type advance(O& obj){
            obj.template advance<I>();
            advance<I + 1, Limit>(obj);
        }

        template<size_t I, int Limit, typename O>
        typename std::enable_if<I == Limit, void>::type apply_step(O&){
        }
        template<size_t I, int Limit, typename O>
        inline typename std::enable_if<I < Limit, void>::type apply_step(O& obj){
            obj.template apply_step<I>();
            apply_step<I + 1, Limit>(obj);
        }

        template<size_t I, int Limit, typename O>
        typename std::enable_if<I == Limit, size_t>::type min_measure_step(O& obj){ 
            return obj.get_tail();
        }
        template<size_t I, int Limit, typename O>
        typename std::enable_if<I < Limit, size_t>::type min_measure_step(O& obj){
            return std::min(obj.template get_step<I>(), min_measure_step<I + 1, Limit>(obj));
        }
    }

    template<class... PartitionedTypes>
    class block_tuple_iterator {
    public:
        static const int arity = sizeof...(PartitionedTypes);
        typedef typename std::tuple_element<0, std::tuple<typename PartitionedTypes::iterator...> >::type base_iterator;
        typedef typename std::tuple_element<0, std::tuple<typename PartitionedTypes::partition_type...> >::type base_block_type;
        template<int N> using get_block_type = typename std::tuple_element<N, std::tuple<typename PartitionedTypes::partition_type...> >::type;
        template<int N> constexpr int get_ib(){ return std::tuple_element<N, std::tuple<PartitionedTypes...> >::type::ib; }

        block_tuple_iterator(typename PartitionedTypes::iterator... iterators, size_t size)
        : base(iterators...)
        {
            expand::latch_position<0,arity>(*this);
            limit = position[0]+size;
            measure_step();
        }
        void operator++ (){
            expand::advance<0,arity>(*this);
            measure_step();
        }
        void measure_step(){
            step = expand::min_measure_step<0,arity>(*this);
            expand::apply_step<0,arity>(*this);
        }
        bool operator != (base_iterator it){
            return (position[0] != it-std::get<0>(base).get_container().begin());
        }
        template<int N>
        typename std::tuple_element<N, std::tuple<typename PartitionedTypes::partition_type...> >::type& locate(){
            return std::get<N>(base).get_container().locate(position[N]);
        }
        template<int N>
        void latch_position(){
            position[N] = std::get<N>(base)-std::get<N>(base).get_container().begin();
        }
        template<int N>
        void advance(){
            position[N] += step;
        }
        template<int N>
        void apply_step(){
            first[N] = position[N] % get_ib<N>();
            second[N] = first[N]+step;
        }
        template<int N>
        size_t get_step(){
            return (get_ib<N>()*__a_ceil((position[N]+1)/get_ib<N>()) - position[N]);
        }
        size_t get_tail(){
            return limit-position[0]; 
        }

        std::tuple<typename PartitionedTypes::iterator...> base;
        size_t first[arity];
        size_t second[arity];
        size_t position[arity];
        size_t limit;
        size_t step;
    };

}

#endif
