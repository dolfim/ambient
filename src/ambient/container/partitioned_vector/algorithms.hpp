/*
 * Copyright Institute for Theoretical Physics, ETH Zurich 2014.
 * Distributed under the Boost Software License, Version 1.0.
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef AMBIENT_CONTAINER_PARTITIONED_VECTOR_ALGORITHMS_HPP
#define AMBIENT_CONTAINER_PARTITIONED_VECTOR_ALGORITHMS_HPP

#include "ambient/container/iterator/block_iterator.hpp"
#include "ambient/container/iterator/block_tuple_iterator.hpp"
#include "ambient/container/partitioned_vector/bitonic_sort.hpp"

namespace ambient {

    template<class InputIterator, class Function>
    void for_each(InputIterator begin, InputIterator end, Function fn){
        typedef block_iterator<typename InputIterator::container_type> iterator;
        for(iterator bit(begin,end); bit != end; ++bit)
            ambient::async([fn](typename iterator::block_type& block, size_t first, size_t second){
                               std::for_each(block.begin()+first, block.begin()+second, fn);
                           }, *bit, bit.first, bit.second);
    }

    template<class InputIterator>
    void sequence(InputIterator begin, InputIterator end){
        typedef block_iterator<typename InputIterator::container_type> iterator;
        for(iterator bit(begin,end); bit != end; ++bit){
            size_t offset = bit.offset();
            ambient::async([offset](typename iterator::block_type& block, size_t first, size_t second){
                               typename iterator::block_type::iterator it = block.begin()+first;
                               std::for_each(it, block.begin()+second, [offset,it](typename iterator::block_type::value_type& e){
                                   e = offset + (&e - it);
                               });
                           }, *bit, bit.first, bit.second);
        }
    }

    template<class ForwardIterator, class T>
    void fill(ForwardIterator begin, ForwardIterator end, const T& val){
        typedef block_iterator<typename ForwardIterator::container_type> iterator;
        for(iterator bit(begin,end); bit != end; ++bit){
            ambient::async([&val](typename iterator::block_type& block, size_t first, size_t second){
                               std::fill(block.begin()+first, block.begin()+second, val);
                           }, *bit, bit.first, bit.second);
        }
    }

    template <class ForwardIterator, class Generator>
    void generate(ForwardIterator begin, ForwardIterator end, Generator gen){
        typedef block_iterator<typename ForwardIterator::container_type> iterator;
        for(iterator bit(begin,end); bit != end; ++bit){
            ambient::async([gen](typename iterator::block_type& block, size_t first, size_t second){
                               std::generate(block.begin()+first, block.begin()+second, gen);
                           }, *bit, bit.first, bit.second);
        }
    }

    template <class InputIterator, class OtherInputIterator, class OutputIterator, class BinaryOperation>
    void transform(InputIterator begin1, InputIterator end1,
                   OtherInputIterator begin2, OutputIterator result,
                   BinaryOperation binary_op)
    {
        typedef block_tuple_iterator<typename InputIterator::container_type,
                                     typename OtherInputIterator::container_type,
                                     typename OutputIterator::container_type> iterator;

        for(iterator bit(begin1,begin2,result,end1-begin1); bit != end1; ++bit){
            ambient::async([binary_op](const typename iterator::template get_block_type<0>& block1, size_t first1, size_t second1,
                                       const typename iterator::template get_block_type<1>& block2, size_t first2,
                                             typename iterator::template get_block_type<2>& block3, size_t first3){
                                        std::transform(block1.cbegin()+first1, block1.cbegin()+second1,
                                                       block2.cbegin()+first2, block3.begin()+first3, binary_op);
                                      }, bit.template locate<0>(), bit.first[0], bit.second[0],
                                         bit.template locate<1>(), bit.first[1],
                                         bit.template locate<2>(), bit.first[2]);
        }
    }

    template <class InputIterator, class OutputIterator, class UnaryOperation>
    void transform(InputIterator begin, InputIterator end,
                   OutputIterator result, UnaryOperation op)
    {
        typedef block_tuple_iterator<typename InputIterator::container_type,
                                     typename OutputIterator::container_type> iterator;

        for(iterator bit(begin,result,end-begin); bit != end; ++bit){
            ambient::async([op](const typename iterator::template get_block_type<0>& block1, size_t first1, size_t second1,
                                      typename iterator::template get_block_type<1>& block2, size_t first2){
                                 std::transform(block1.cbegin()+first1, block1.cbegin()+second1,
                                                block2.begin()+first2, op);
                               }, bit.template locate<0>(), bit.first[0], bit.second[0],
                                  bit.template locate<1>(), bit.first[1]);
        }
    }

    template <class InputIterator, class OutputIterator>
    OutputIterator copy(InputIterator begin, InputIterator end, OutputIterator result){
        typedef block_tuple_iterator<typename InputIterator::container_type,
                                     typename OutputIterator::container_type> iterator;

        for(iterator bit(begin,result,end-begin); bit != end; ++bit){
            ambient::async([](const typename iterator::template get_block_type<0>& block1, size_t first1, size_t second1,
                                    typename iterator::template get_block_type<1>& block2, size_t first2){
                               std::copy(block1.cbegin()+first1, block1.cbegin()+second1, block2.begin()+first2);
                             }, bit.template locate<0>(), bit.first[0], bit.second[0],
                                bit.template locate<1>(), bit.first[1]);
        }
        return result+(end-begin);
    }

    template <class ForwardIterator, class T>
    void replace(ForwardIterator begin, ForwardIterator end, T old_value, T new_value){
        typedef block_iterator<typename ForwardIterator::container_type> iterator;
        for(iterator bit(begin,end); bit != end; ++bit){
            ambient::async([old_value,new_value](typename iterator::block_type& block, size_t first, size_t second){
                               std::replace(block.begin()+first, block.begin()+second, old_value, new_value);
                           }, *bit, bit.first, bit.second);
        }
    }

    template <class InputIterator, class T>
    ambient::atomic<T> reduce(InputIterator begin, InputIterator end, T init){
        typedef block_iterator<typename InputIterator::container_type> iterator;
        typedef typename iterator::block_type block_type;

        iterator bit(begin,end);
        block_type reduced(bit.n_blocks());

        for(size_t b = 0; bit != end; ++bit){
            ambient::async([](const block_type& block, size_t first, size_t second, const block_type& res, size_t idx){
                               const typename block_type::value_type* array = block.cbegin();
                               const_cast<block_type&>(res)[idx] = __sec_reduce_add(array[first:second]);
                           }, *bit, bit.first, bit.second, reduced, b);
            b++;
        }

        ambient::atomic<T> res(init);
        ambient::async([](const block_type& block, ambient::atomic<T>& value){
                           const typename block_type::value_type* array = block.cbegin();
                           while(!block.ambient_before->locked_once()) continue;
                           value.set(value.get()+__sec_reduce_add(array[0:block.size()]));
                       }, reduced, res);
        return res; 
    }

    template <class InputIterator, class T, class BinaryOperation>
    ambient::atomic<T> reduce(InputIterator begin, InputIterator end, T init, BinaryOperation op){
        typedef block_iterator<typename InputIterator::container_type> iterator;
        typedef typename iterator::block_type block_type;

        iterator bit(begin,end);
        block_type reduced(bit.n_blocks());

        for(size_t b = 0; bit != end; ++bit){
            ambient::async([op](const block_type& block, size_t first, size_t second, const block_type& res, size_t idx){
                               const typename block_type::value_type* array = block.cbegin();
                               const_cast<block_type&>(res)[idx] = __sec_reduce(0, array[first:second], op);
                           }, *bit, bit.first, bit.second, reduced, b);
            b++;
        }

        ambient::atomic<T> res(init);
        ambient::async([op](const block_type& block, ambient::atomic<T>& value){
                           const typename block_type::value_type* array = block.cbegin();
                           while(!block.ambient_before->locked_once()) continue;
                           value.set(__sec_reduce(value.get(), array[0:block.size()], op));
                       }, reduced, res);
        return res;
    }


    template <class RandomAccessIterator, class Compare>
    void sort(RandomAccessIterator begin, RandomAccessIterator end, Compare comp){
        detail::bitonic_sort<RandomAccessIterator,Compare>::sort(begin, begin + (1 << __a_ceil(std::log2(end-begin))), end, comp);
    }

    template <class RandomAccessIterator>
    void sort(RandomAccessIterator begin, RandomAccessIterator end){
        struct {
            typedef typename std::iterator_traits<RandomAccessIterator>::value_type value_type;
            inline bool operator()(const value_type& a, const value_type& b){
                return a < b;
            }
        } compare;
        return sort(begin, end, compare);
    }


    /* Waiting list:

    template <class ForwardIterator, class T>
    ForwardIterator remove (ForwardIterator first, ForwardIterator last, const T& val){
    }

    template <class ForwardIterator>
    ForwardIterator unique (ForwardIterator first, ForwardIterator last){
    }

    template <class ForwardIterator, class BinaryPredicate>
    ForwardIterator unique (ForwardIterator first, ForwardIterator last, BinaryPredicate pred){
    }

    template <class InputIterator, class T>
    InputIterator find (InputIterator first, InputIterator last, const T& val){
    }
    */

}

#endif
