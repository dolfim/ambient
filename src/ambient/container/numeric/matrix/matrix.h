/*
 * Copyright Institute for Theoretical Physics, ETH Zurich 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef AMBIENT_CONTAINER_NUMERIC_MATRIX_H
#define AMBIENT_CONTAINER_NUMERIC_MATRIX_H

#include "ambient/ambient.hpp"
#include "ambient/container/future.hpp"

namespace ambient { inline namespace numeric {

    template <typename T, class Allocator = default_allocator>
    class matrix : public ambient::block<T,Allocator>, public ambient::memory::cpu::use_fixed_new<matrix<T,Allocator> > {
    public:
        typedef T value_type;
        typedef size_t size_type;
        typedef Allocator allocator_type;
        typedef size_t difference_type;
        typedef typename ambient::future<double> real_type;
        typedef typename ambient::future<T> scalar_type;

        explicit matrix();
        explicit matrix(size_type rows, size_type cols, value_type init_value = value_type()); 
        matrix(const matrix& a);
        matrix& operator = (const matrix& rhs);
        template<class OtherAllocator>
        matrix& operator = (const matrix<T,OtherAllocator>& rhs); 
    public:
        template<class M> static size_t inc (const M& a); 
        template<class M> static size_t rows(const M& a); 
        template<class M> static size_t cols(const M& a);
        size_type num_rows() const;
        size_type num_cols() const;
        scalar_type trace() const;
        void transpose();
        void conj();
        void swap(matrix& r);
        template<typename TT> 
        friend void swap(matrix& x, matrix& y);
        void resize(size_type m, size_type n); 
        matrix& locate(size_type i, size_type j);
        const matrix& locate(size_type i, size_type j) const;
        size_t addr(size_type i, size_type j) const;
        matrix& operator += (const matrix& rhs);
        matrix& operator -= (const matrix& rhs);
        template <typename T2> matrix& operator *= (const T2& t);
        template <typename T2> matrix& operator /= (const T2& t);
        value_type& operator() (size_type i, size_type j);
        const value_type& operator() (size_type i, size_type j) const;
        value_type* data() volatile;
        const value_type* data() const volatile;
        static const char* code();
    };

    template <class Matrix>
    class subset_view : public ambient::proxy<Matrix> {
    public:
        typedef typename Matrix::real_type real_type;
        typedef typename Matrix::size_type size_type; 
        typedef typename Matrix::value_type value_type;
        typedef typename Matrix::scalar_type scalar_type;
        typedef typename Matrix::difference_type difference_type;
        typedef typename Matrix::allocator_type allocator_type;
        subset_view(const Matrix& a) : ambient::proxy<Matrix>(a), m(&a) {}
        size_t num_rows(){ return m->num_rows(); };
        size_t num_cols(){ return m->num_cols(); };
        template<class M> static size_t rows(const M& a); 
        template<class M> static size_t cols(const M& a);
        static const char* code();
        operator Matrix& () const { return *(Matrix*)m; }
    private:
        const Matrix* m;
    };

    template <class Matrix>
    class transpose_view : public ambient::proxy<Matrix>, public ambient::memory::cpu::use_fixed_new<transpose_view<Matrix> > {
    public:
        typedef typename Matrix::real_type real_type;
        typedef typename Matrix::size_type size_type; 
        typedef typename Matrix::value_type value_type;
        typedef typename Matrix::scalar_type scalar_type;
        typedef typename Matrix::difference_type difference_type;
        typedef typename Matrix::allocator_type allocator_type;
        explicit transpose_view(const Matrix& a) : ambient::proxy<Matrix>(a) {}
        transpose_view& locate(size_type i, size_type j);
        const transpose_view& locate(size_type i, size_type j) const;
        size_t addr(size_type i, size_type j) const;
        operator Matrix () const;
        size_t num_rows() const;
        size_t num_cols() const;
        template<class M> static size_t inc (const M& a); 
        template<class M> static size_t rows(const M& a); 
        template<class M> static size_t cols(const M& a);
        static const char* code();
    };

} }

namespace ambient {

    template <class Matrix>
    struct info < const transpose_view<Matrix> > {
        typedef const transpose_view<Matrix> type;
        template <typename U> static const Matrix& unfold(type& folded){ return *(const Matrix*)&folded; }
    };

    template <class Matrix>
    struct info < transpose_view<Matrix> > {
        typedef transpose_view<Matrix> type;
        template <typename U> static Matrix& unfold(type& folded){ return *(Matrix*)&folded; }
    };
}

#endif
