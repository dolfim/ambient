/*
 * Ambient Project
 *
 * Copyright (C) 2014 Institute for Theoretical Physics, ETH Zurich
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef AMBIENT_MEMORY_FACTORY
#define AMBIENT_MEMORY_FACTORY

namespace ambient { namespace memory {

    template<size_t S>
    class private_factory {
    public:
        private_factory(){
            this->buffers.push_back(std::malloc(S));
            this->buffer = &this->buffers[0];
        }
       ~private_factory(){
            for(int i = 0; i < buffers.size(); i++) 
                std::free(this->buffers[i]);
        }
        void* provide(){
            void* chunk = *buffer;
            if(chunk == buffers.back()){
                buffers.push_back(std::malloc(S));
                buffer = &buffers.back();
            }else
                buffer++;
            return chunk;
        }
        void reset(){
            buffer = &buffers[0];
        }
        size_t size(){
            return (buffer - &buffers[0]);
        }
        std::vector<void*> buffers;
        void** buffer;
    };

    template<size_t S>
    class factory {
    public:
        typedef ambient::mutex mutex;
        typedef ambient::guard<mutex> guard;

        static factory& instance(){
            static factory singleton; return singleton;
        }
        factory(){
            this->buffers.push_back(std::malloc(S));
            this->counts.push_back(0);
            this->buffer = &this->buffers[0];
            this->reuse_count = 0;
        }
        static void* provide(){
            factory& s = instance();
            guard g(s.mtx);
            void* chunk;

            if(s.r_buffers.empty()){
                chunk = *s.buffer;
                if(*s.buffer == s.buffers.back()){
                    s.buffers.push_back(std::malloc(S));
                    s.counts.push_back(0);
                    s.buffer = &s.buffers.back();
                }else
                    s.buffer++;
            }else{
                chunk = s.r_buffers.back();
                s.r_buffers.pop_back();
                s.reuse_count++;
            }

            return chunk;
        }
        static void collect(void* chunk, long int usage){
            factory& s = instance();
            guard g(s.mtx);

            for(int i = 0; i < s.buffers.size(); i++){
                if(s.buffers[i] == chunk){
                    s.counts[i] += usage;
                    if(s.counts[i] == 0) s.r_buffers.push_back(chunk);
                    break;
                }
            }
        }
        static void reuse(void* ptr){
            factory& s = instance();
            guard g(s.mtx);
            for(int i = 0; i < s.buffers.size(); i++){
                if((size_t)ptr < ((size_t)s.buffers[i] + S) && (size_t)ptr >= (size_t)s.buffers[i]){
                    s.counts[i]--;
                    if(s.counts[i] == 0) s.r_buffers.push_back(s.buffers[i]);
                    break;
                }
            }
        }
        static void deallocate(){
            factory& s = instance();
            for(int i = 1; i < s.buffers.size(); i++) std::free(s.buffers[i]);
            s.buffers.resize(1); s.counts.resize(1);
        }
        static void reset(){
            factory& s = instance();
            s.buffer = &s.buffers[0];
            s.r_buffers.clear();
            for(int i = 0; i < s.counts.size(); i++)
                s.counts[i] = 0;
            s.reuse_count = 0;
        }
        static size_t size(){
            factory& s = instance();
            return (s.buffer - &s.buffers[0]);
        }
        static size_t reused(){
            return instance().reuse_count;
        }
        static size_t reserved(){
            return instance().counts.size();
        }
        mutex mtx;
        std::vector<long int> counts;
        std::vector<void*> buffers;
        std::vector<void*> r_buffers;
        size_t reuse_count;
        void** buffer;
    };

} }

#endif
