/*
 * Copyright Institute for Theoretical Physics, ETH Zurich 2014.
 * Distributed under the Boost Software License, Version 1.0.
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifdef AMBIENT_SERIAL_COLLECTION
#ifndef AMBIENT_CONTROLLERS_SSM_CONTEXT_SERIAL_HPP
#define AMBIENT_CONTROLLERS_SSM_CONTEXT_SERIAL_HPP

namespace ambient { 

    inline void context_serial::init(actor* base_actor){
        actors.push(base_actor);
    }

    inline void context_serial::sync(){
        controller.flush();
        controller.clear();
    }

    inline context_serial& context_serial::get(){
        return *this;
    }

    inline bool context_serial::threaded() const {
        return false;
    }

    inline void context_serial::delay_transfer(controllers::ssm::meta* m){
    }

    inline void context_serial::fork(void*){
    }

    inline void context_serial::join(){
    }

    inline void context_serial::diverge(int){
    }

}

#endif
#endif
