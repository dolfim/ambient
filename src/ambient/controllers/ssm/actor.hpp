/*
 * Copyright Institute for Theoretical Physics, ETH Zurich 2014.
 * Distributed under the Boost Software License, Version 1.0.
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef AMBIENT_CONTROLLERS_SSM_ACTOR_HPP
#define AMBIENT_CONTROLLERS_SSM_ACTOR_HPP

namespace ambient {

    inline actor::~actor(){
        if(dry) return;
        selector.revoke_controller(this->controller);
        selector.pop_actor();
    }
    inline actor::actor(actor_t t) : type(actor_t::common), dry(true) {
        if(t != actor_t::common) throw std::runtime_error("Error: unknown scope type!");
        if(selector.has_nested_actor()){
            if(selector.get_actor().type == actor_t::common) return;
            throw std::runtime_error("Error: common actor inside other actor type!");
        }
        this->rank = selector.get_controller().get_shared_rank();
        this->state = ambient::locality::common;
        this->controller = selector.provide_controller();
        selector.push_actor(this);
        this->dry = false;
    }
    inline actor::actor(scope::const_iterator it) : type(actor_t::single), dry(true) {
        if(ambient::selector.has_nested_actor()) return;
        this->controller = selector.provide_controller();
        selector.push_actor(this); 
        this->round = this->controller->get_num_procs();
        this->rank = (*it) % this->round;
        this->state = (this->rank == controller->get_rank()) ? ambient::locality::local : ambient::locality::remote;
        this->dry = false;
    }
    inline bool actor::remote() const {
        return (state == ambient::locality::remote);
    }
    inline bool actor::local() const {
        return (state == ambient::locality::local);
    }
    inline bool actor::common() const {
        return (state == ambient::locality::common);
    }
    inline rank_t actor::which() const {
        return this->rank;
    }


    inline actor_auto::actor_auto(){
        this->controller = selector.provide_controller();
        this->controller->reserve();
        this->round = controller->get_num_procs();
        this->scores.resize(round, 0);
        this->set(0);
    }
    inline void actor_auto::set(scope::const_iterator it){
        this->set(*it);
    }
    inline void actor_auto::set(rank_t r){
        this->rank = r;
        this->state = (this->rank == controller->get_rank()) ? ambient::locality::local : ambient::locality::remote;
    }
    inline void actor_auto::intend_read(models::ssm::revision* r){
        if(r == NULL || model_type::common(r)) return;
        this->scores[model_type::owner(r)] += r->spec.extent;
    }
    inline void actor_auto::intend_write(models::ssm::revision* r){
        if(r == NULL || model_type::common(r)) return;
        this->stakeholders.push_back(model_type::owner(r));
    }
    inline void actor_auto::schedule(){
        int max = 0;
        rank_t rank = this->rank;
        if(stakeholders.empty()){
            for(int i = 0; i < this->round; i++)
            if(scores[i] >= max){
                max = scores[i];
                rank = i;
            }
        }else{
            for(int i = 0; i < stakeholders.size(); i++){
                rank_t k = stakeholders[i];
                if(scores[k] >= max){
                    max = scores[k];
                    rank = k;
                }
            }
            stakeholders.clear();
        }
        std::fill(scores.begin(), scores.end(), 0);
        this->set(rank);
    }
}

#endif
